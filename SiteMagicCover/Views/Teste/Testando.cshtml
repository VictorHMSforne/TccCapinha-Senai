@*<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Customização de Capinha</title>
    <script src="https://unpkg.com/fabric@5.3.0/dist/fabric.min.js"></script>
    <style>
        canvas {
            border: 4px solid #323232;
            width: 40%; /* Ajuste a largura do canvas */
            height: 40%; /* Ajuste a altura do canvas */
            margin: 5% auto; /* Centralize o canvas e adicione margem ao redor */
            display: block;
            border-radius: 70px;
        }

        input {
            margin: 8px 0;
        }
    </style>
</head>

<body>
    <h2>Customização de Capinha</h2>
    <input accept="image/*" type="file" name="image" id="input" />
    <button id="btn">Gerar imagem</button>
    <canvas id="canvas"></canvas>
    <script>
        const canvas = new fabric.Canvas("canvas");
        canvas.setWidth(innerWidth - 200);
        canvas.setHeight(innerHeight - 200);

        // Adiciona imagem de fundo
        fabric.Image.fromURL('/images/mockups/Iphone15PM.png', function (img) {
            img.set({
                selectable: false,
                evented: false
            });
            canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas), {
                scaleX: canvas.width / img.width,
                scaleY: canvas.height / img.height
            });
        });

        

        input.onchange = (evnt) => {
            const file = evnt.target.files[0];
            const url = URL.createObjectURL(file);
            const imgNode = new Image();
            imgNode.src = url;
            imgNode.onload = () => {
                const img = new fabric.Image(imgNode, {
                    left: 100,
                    top: 100,
                    angle: 0,
                    opacity: 1,
                });
                canvas.add(img);
                canvas.moveTo(img, 0);  // Move a imagem carregada para o fundo
            };
        };

        btn.onclick = () => {
            const dataURL = canvas.toDataURL("image/png");
            const a = document.createElement("a");
            a.download = "imagem_personalizada";
            a.href = dataURL;
            a.click();
        };
    </script>
</body>

</html>*@


@*<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Customização de Capinha</title>
    <script src="https://unpkg.com/fabric@5.3.0/dist/fabric.min.js"></script>
    <style>
        canvas {
            border: 4px solid #323232;
            border-radius: 80px;
            margin: auto;

        }

        input {
            margin: 8px 0;
        }
    </style>
</head>

<body>
    <h2>Customização de Capinha</h2>
    <input accept="image/*" type="file" name="image" id="input" />
    <button id="btn">Gerar imagem</button>
    <canvas id="canvas"></canvas>
    <script>
        const canvas = new fabric.Canvas("canvas");
        //https://localhost:7015/teste/testando
        // Adiciona imagem de fundo e ajusta o tamanho do canvas
        fabric.Image.fromURL('/images/mockups/Iphone15Fundo.png', function (img) {
            canvas.setWidth(563);
            canvas.setHeight(1111);
            img.set({ left: -90 });
            img.set({ top: -90 });

            
            

            canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas), {
                scaleX: 1,
                scaleY: 1
            });

            // Adicionar bordas para a câmera
            const cameraBorders = [
                new fabric.Rect({
                    left: 135,
                    top: 50,
                    width: 50,
                    height: 50,
                    fill: 'rgba(0,0,0,0)',
                    stroke: 'red',
                    strokeWidth: 5,
                    selectable: false,
                    evented: false
                }),
                new fabric.Rect({
                    left: 210,
                    top: 50,
                    width: 50,
                    height: 50,
                    fill: 'rgba(0,0,0,0)',
                    stroke: 'red',
                    strokeWidth: 5,
                    selectable: false,
                    evented: false
                }),
                new fabric.Rect({
                    left: 285,
                    top: 50,
                    width: 50,
                    height: 50,
                    fill: 'rgba(0,0,0,0)',
                    stroke: 'red',
                    strokeWidth: 5,
                    selectable: false,
                    evented: false
                })
            ];
            canvas.add(...cameraBorders);
        });

        input.onchange = (evnt) => {
            const file = evnt.target.files[0];
            const url = URL.createObjectURL(file);
            const imgNode = new Image();
            imgNode.src = url;
            imgNode.onload = () => {
                const img = new fabric.Image(imgNode, {
                    left: 200,
                    top: 100,
                    angle: 0,
                    opacity: 1,
                });
                canvas.add(img);
                canvas.moveTo(img, 0); // Move a imagem carregada para o fundo
            };
        };

        btn.onclick = () => {
            const dataURL = canvas.toDataURL("image/png");
            const a = document.createElement("a");
            a.download = "imagem_personalizada";
            a.href = dataURL;
            a.click();
        };
    </script>
</body>

</html>*@

@*<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Customização de Capinha</title>
    <script src="https://unpkg.com/fabric@5.3.0/dist/fabric.min.js"></script>
    <style>
        #canvas-container {
            position: relative;
            width: 470px; /* Ajuste conforme necessário */
            height: 939px; /* Ajuste conforme necessário */
            margin: auto;
        }

        #canvas {
            border: 4px solid #323232;
            border-radius: 80px;
            position: absolute;
            top: 0;
            left: 0;
        }

        #camera-canvas {
            border: 2px solid red; /* Ajuste conforme necessário */
            border-radius: 88px;
            position: relative;
            top: 500px; /* Ajuste conforme necessário */
            left: 900px; /* Ajuste conforme necessário */
            z-index: 1; /* Garante que esteja sobre o outro canvas */
        }

        input {
            margin: 8px 0;
        }
    </style>
</head>

<body>
    <h2>Customização de Capinha</h2>
    <input accept="image/*" type="file" name="image" id="input" />
    <button id="btn">Gerar imagem</button>
    <div id="canvas-container">
        <canvas id="canvas"></canvas>
        <canvas id="camera-canvas"></canvas>
    </div>
    <script>
        const canvas = new fabric.Canvas("canvas");
        const cameraCanvas = new fabric.Canvas("camera-canvas");

        // Adiciona imagem de fundo e ajusta o tamanho do canvas principal
        fabric.Image.fromURL('/images/mockups/Iphone15Fundo.png', function (img) {
            canvas.setWidth(470);
            canvas.setHeight(939);
            img.set({ left: -90 });
            img.set({ top: -170 });

            canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas), {
                scaleX: 1,
                scaleY: 1
            });
        });

        input.onchange = (evnt) => {
            const file = evnt.target.files[0];
            const url = URL.createObjectURL(file);
            const imgNode = new Image();
            imgNode.src = url;
            imgNode.onload = () => {
                const img = new fabric.Image(imgNode, {
                    left: 200,
                    top: 100,
                    angle: 0,
                    opacity: 1,
                });
                canvas.add(img);
                canvas.moveTo(img, 0); // Move a imagem carregada para o fundo
            };
        };

        btn.onclick = () => {
            const dataURL = canvas.toDataURL("image/png");
            const a = document.createElement("a");
            a.download = "imagem_personalizada";
            a.href = dataURL;
            a.click();
        };
    </script>
</body>

</html>*@


@* <!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Customização de Capinha</title>
    <script src="https://unpkg.com/fabric@5.3.0/dist/fabric.min.js"></script>
    <style>
        canvas {
            border: 4px solid #323232;
            border-radius: 80px;
            margin: auto;
        }

        input {
            margin: 8px 0;
        }
    </style>
</head>

<body>
    <h2>Customização de Capinha</h2>
    <input accept="image/*" type="file" name="image" id="input" />
    <button id="btn">Gerar imagem</button>
    <canvas id="canvas"></canvas>
    <script>
        const canvas = new fabric.Canvas("canvas");

        // Adiciona imagem de fundo e ajusta o tamanho do canvas
        fabric.Image.fromURL('/images/mockups/Iphone15Fundo.png', function (img) {
            canvas.setWidth(470);
            canvas.setHeight(939);
            img.set({ left: -90 });
            img.set({ top: -170 });

            canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas), {
                scaleX: 1,
                scaleY: 1
            });
        });

        input.onchange = (evnt) => {
            const file = evnt.target.files[0];
            const url = URL.createObjectURL(file);
            const imgNode = new Image();
            imgNode.src = url;
            imgNode.onload = () => {
                const img = new fabric.Image(imgNode, {
                    left: 200,
                    top: 100,
                    angle: 0,
                    opacity: 1,
                });
                canvas.add(img);
                canvas.moveTo(img, 0); // Move a imagem carregada para o fundo
            };
        };

        btn.onclick = () => {
            const dataURL = canvas.toDataURL("image/png");
            const a = document.createElement("a");
            a.download = "imagem_personalizada";
            a.href = dataURL;
            a.click();
        };
    </script>
</body>

</html> *@

@* <!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Customização de Capinha</title>
    <script src="https://cdn.jsdelivr.net/npm/konva@8.3.11/konva.min.js"></script>
    <style>
        .container {
            position: relative;
            width: 470px;
            height: 939px;
            margin: auto;
            background-image: url('/images/mockups/Iphone15Fundo.png');
            background-size: cover;
        }

        .mask {
            position: absolute;
            width: 470px;
            height: 939px;
            mask-image: url('/images/mockups/Iphone15Fundo.png');
            mask-size: cover;
            -webkit-mask-image: url('/images/mockups/Iphone15Fundo.png');
            -webkit-mask-size: cover;
        }

        input {
            margin: 8px 0;
        }

        button {
            margin: 8px 0;
        }
    </style>
</head>

<body>
    <h2>Customização de Capinha</h2>
    <div class="container">
        <div id="konva-container" class="mask"></div>
    </div>
    <input accept="image/*" type="file" id="fileInput" />
    <button id="btn">Gerar imagem</button>
    <script>
        const stage = new Konva.Stage({
            container: 'konva-container',
            width: 470,
            height: 939
        });

        const layer = new Konva.Layer();
        stage.add(layer);

        document.getElementById('fileInput').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const konvaImage = new Konva.Image({
                        image: img,
                        x: 0,
                        y: 0,
                        width: 470,
                        height: 939
                    });
                    layer.add(konvaImage);
                    layer.batchDraw();
                }
                img.src = e.target.result;
            }
            reader.readAsDataURL(file);
        });

        document.getElementById('btn').addEventListener('click', function () {
            stage.toDataURL({
                callback(dataUrl) {
                    const a = document.createElement('a');
                    a.href = dataUrl;
                    a.download = 'imagem_personalizada.png';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                }
            });
        });
    </script>
</body>

</html> *@

@*<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Konva.js Layers Example</title>
    <style>
        .container {
            display: flex;
            justify-content: center;
        }

        .konva-container {
            border: 1px solid black;
            width: 470px;
            height: 939px;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/konva@8.3.11/konva.min.js"></script>
</head>
<body>
    <h2>Konva.js Layers Example</h2>
    <div class="container">
        <div id="konvaContainer" class="konva-container"></div>
    </div>
    <input accept="image/*" type="file" id="fileInput" />
    <script>
        // Konva.js setup
        const stage = new Konva.Stage({
            container: 'konvaContainer',
            width: 470,
            height: 939
        });

        // Background Layer
        const backgroundLayer = new Konva.Layer();
        stage.add(backgroundLayer);

        // Image Layer (user's image)
        const imageLayer = new Konva.Layer();
        stage.add(imageLayer);

        // Overlay Layer (fixed image on top)
        const overlayLayer = new Konva.Layer();
        stage.add(overlayLayer);

        // Load and set background image
        const backgroundImg = new Image();
        backgroundImg.onload = function () {
            const bgKonvaImage = new Konva.Image({
                image: backgroundImg,
                x: 0,
                y: 0,
                width: stage.width(),
                height: stage.height()
            });
            backgroundLayer.add(bgKonvaImage);
            backgroundLayer.batchDraw();
        };
        backgroundImg.src = '/images/mockups/Iphone15Fundo.png';

        // Handle user image upload
        document.getElementById('fileInput').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const userImage = new Konva.Image({
                        image: img,
                        x: 0,
                        y: 0,
                        draggable: true,
                        width: stage.width(),
                        height: stage.height()
                    });
                    imageLayer.add(userImage);
                    imageLayer.batchDraw();
                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        });

        // Load and set overlay image
        const overlayImg = new Image();
        overlayImg.onload = function () {
            const overlayKonvaImage = new Konva.Image({
                image: overlayImg,
                x: 0,
                y: 0,
                width: stage.width(),
                height: stage.height()
            });
            overlayLayer.add(overlayKonvaImage);
            overlayLayer.batchDraw();
        };
        overlayImg.src = 'https://static-factory.gocase.com.br/uploads/material/preview_mask/6571/15_pro_max_air_certo.png?t=1';
    </script>
</body>
</html>*@

@* <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Konva.js Layers Example</title>
    <style>
        .container {
            display: flex;
            justify-content: center;
        }

        .konva-container {
            border: 1px solid black;
           /*  width: 300px; 
            height: 600px;  */
            width: 215px ;
            height: 440px;
            border-radius: 40px;
            overflow: hidden; /* Evita que a imagem de fundo ultrapasse os limites do contêiner */
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/konva@8.3.11/konva.min.js"></script>
</head>
<body>
    <h2>Konva.js Layers Example</h2>
    <div class="container">
        <div id="konvaContainer" class="konva-container"></div>
    </div>
    <input accept="image/*" type="file" id="fileInput" />
    <script>
        // Konva.js setup
        const stage = new Konva.Stage({
            container: 'konvaContainer',
            width: 300, // Ajuste a largura do estágio para a largura do contêiner
            height: 600 // Ajuste a altura do estágio para a altura do contêiner
        });

        // Background Layer
        const backgroundLayer = new Konva.Layer();
        stage.add(backgroundLayer);

        // Image Layer (user's image)
        const imageLayer = new Konva.Layer();
        stage.add(imageLayer);

        // Overlay Layer (fixed image on top)
        const overlayLayer = new Konva.Layer();
        stage.add(overlayLayer);

        // Load and set background image
        const backgroundImg = new Image();
        backgroundImg.onload = function () {
            const bgKonvaImage = new Konva.Image({
                image: backgroundImg,
                x: -43,
                y: -80,
                width: stage.width(),
                height: stage.height()
            });
            backgroundLayer.add(bgKonvaImage);
            backgroundLayer.batchDraw();
        };
        backgroundImg.src = '/images/mockups/Iphone15Fundo.png';

        // Load and set overlay image with rounded corners
        const overlayImg = new Image();
        overlayImg.onload = function () {
            let cropX = 105;
            let cropY = 180;
            let cropWidth = 270;
            let cropHeight = 290;

            const overlayKonvaImage = new Konva.Image({
                image: overlayImg,
                x: 21, //11
                y: 9,
                width: 118,
                height: 123,
                crop: {
                    x: cropX,
                    y: cropY,
                    width: cropWidth,
                    height: cropHeight
                }
            });

            // Create a group to clip the image with rounded corners
            const group = new Konva.Group({
                x: overlayKonvaImage.x(),// posição esquerda/direita do grupo
                y: overlayKonvaImage.y(),
                clipFunc: function (ctx) {
                    const radius = 50;
                    const width = 300; // Largura do group
                    const height = 129;
                    ctx.beginPath();
                    ctx.moveTo(radius, 0);
                    ctx.arcTo(width, 0, width, height, radius);
                    ctx.arcTo(width, height, 0, height, radius);
                    ctx.arcTo(0, height, 0, 0, radius);
                    ctx.arcTo(0, 0, width, 0, radius);
                    ctx.closePath();
                    ctx.clip();
                }
            });

            group.add(overlayKonvaImage);

            // Create border rectangle
            const borderRect = new Konva.Rect({
                x: 20,// adapte a borda pro group /direita e esquerda
                y: 9,
                width: overlayKonvaImage.width(),
                height: 118,
                stroke: 'black',
                strokeWidth: 2,
                cornerRadius: 23
            });

            group.add(borderRect);
            overlayLayer.add(group);
            overlayLayer.batchDraw();
        };
        overlayImg.src = '/images/mockups/Iphone15Fundo.png'; // Your overlay image for the camera area

        // Handle user image upload
        document.getElementById('fileInput').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const userImage = new Konva.Image({
                        image: img,
                        x: 0,
                        y: 0,
                        draggable: true,
                        width: img.width, // Use original width and height of the image
                        height: img.height
                    });

                    // Add the image to the layer
                    imageLayer.add(userImage);

                    // Create a transformer for the user image
                    const tr = new Konva.Transformer({
                        nodes: [userImage],
                        boundBoxFunc: function (oldBox, newBox) {
                            // Limit resizing to the canvas dimensions
                            newBox.width = Math.max(30, newBox.width);
                            newBox.height = Math.max(30, newBox.height);
                            newBox.x = Math.max(0, newBox.x);
                            newBox.y = Math.max(0, newBox.y);
                            newBox.x = Math.min(stage.width() - newBox.width, newBox.x);
                            newBox.y = Math.min(stage.height() - newBox.height, newBox.y);
                            return newBox;
                        }
                    });

                    // Add the transformer to the layer
                    imageLayer.add(tr);
                    imageLayer.draw();

                    // Make transformer active on click
                    userImage.on('click', () => {
                        tr.nodes([userImage]);
                        imageLayer.draw();
                    });

                    // Deselect transformer on stage click
                    stage.on('click', (e) => {
                        if (e.target === stage) {
                            tr.nodes([]);
                            imageLayer.draw();
                        }
                    });

                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        });
    </script>
</body>
</html> *@














@* <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Konva.js Layers Example</title>
    <style>
        .container {
            display: flex;
            justify-content: center;
        }

        .konva-container {
            border: 1px solid black;
            width: 215px;
            height: 440px;
            border-radius: 40px;
            overflow: hidden;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/konva@8.3.11/konva.min.js"></script>
</head>
<body>
    <h2>Konva.js Layers Example</h2>
    <div class="container">
        <div id="konvaContainer" class="konva-container"></div>
    </div>
    <input accept="image/*" type="file" id="fileInput" />
    <script>
        // Konva.js setup
        const stage = new Konva.Stage({
            container: 'konvaContainer',
            width: 215,
            height: 440
        });

        // Background Layer
        const backgroundLayer = new Konva.Layer();
        stage.add(backgroundLayer);

        // Image Layer (user's image)
        const imageLayer = new Konva.Layer();
        stage.add(imageLayer);

        // Overlay Layer (fixed image on top)
        const overlayLayer = new Konva.Layer();
        stage.add(overlayLayer);

        // Load and set background image
        const backgroundImg = new Image();
        backgroundImg.onload = function () {
            const bgKonvaImage = new Konva.Image({
                image: backgroundImg,
                x: 0,
                y: 0,
                width: stage.width(),
                height: stage.height()
            });
            backgroundLayer.add(bgKonvaImage);
            backgroundLayer.batchDraw();
        };
        backgroundImg.src = '/images/mockups/Iphone15Fundo.png';

        // Load and set overlay image with rounded corners
        const overlayImg = new Image();
        overlayImg.onload = function () {
            let cropX = 125;
            let cropY = 200;
            let cropWidth = 290;
            let cropHeight = 250;

            const overlayKonvaImage = new Konva.Image({
                image: overlayImg,
                x: 11,
                y: 10,
                width: 95,
                height: 100,
                crop: {
                    x: cropX,
                    y: cropY,
                    width: cropWidth,
                    height: cropHeight
                }
            });

            // Create a group to clip the image with rounded corners
            const group = new Konva.Group({
                x: overlayKonvaImage.x(),
                y: overlayKonvaImage.y(),
                clipFunc: function (ctx) {
                    const radius = 23;
                    const width = 111;
                    const height = 108;
                    ctx.beginPath();
                    ctx.moveTo(radius, 0);
                    ctx.arcTo(width, 0, width, height, radius);
                    ctx.arcTo(width, height, 0, height, radius);
                    ctx.arcTo(0, height, 0, 0, radius);
                    ctx.arcTo(0, 0, width, 0, radius);
                    ctx.closePath();
                    ctx.clip();
                }
            });

            group.add(overlayKonvaImage);

            // Create border rectangle
            const borderRect = new Konva.Rect({
                x: 9,
                y: 5,
                width: 100,
                height: 102,
                stroke: 'black',
                strokeWidth: 3,
                cornerRadius: 23
            });

            group.add(borderRect);
            overlayLayer.add(group);
            overlayLayer.batchDraw();
        };
        overlayImg.src = '/images/mockups/Iphone15Fundo.png';

        // Handle user image upload
        document.getElementById('fileInput').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const userImage = new Konva.Image({
                        image: img,
                        x: 0,
                        y: 0,
                        draggable: true,
                        width: img.width,
                        height: img.height
                    });

                    // Add the image to the layer
                    imageLayer.add(userImage);

                    // Create a transformer for the user image
                    const tr = new Konva.Transformer({
                        nodes: [userImage],
                        boundBoxFunc: function (oldBox, newBox) {
                            newBox.width = Math.max(30, newBox.width);
                            newBox.height = Math.max(30, newBox.height);
                            newBox.x = Math.max(0, newBox.x);
                            newBox.y = Math.max(0, newBox.y);
                            newBox.x = Math.min(stage.width() - newBox.width, newBox.x);
                            newBox.y = Math.min(stage.height() - newBox.height, newBox.y);
                            return newBox;
                        }
                    });

                    // Add the transformer to the layer
                    imageLayer.add(tr);
                    imageLayer.draw();

                    // Make transformer active on click
                    userImage.on('click', () => {
                        tr.nodes([userImage]);
                        imageLayer.draw();
                    });

                    // Deselect transformer on stage click
                    stage.on('click', (e) => {
                        if (e.target === stage) {
                            tr.nodes([]);
                            imageLayer.draw();
                        }
                    });
                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        });
    </script>
</body>
</html> *@




<!--CASO DE RUIM-->

@* <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Konva.js Layers Example</title>
    <style>
        .container {
            display: flex;
            justify-content: center;
            flex-direction: column;
            align-items: center;
        }

        .konva-container {
            border: 1px solid black;
            width: 215px;
            height: 440px;
            border-radius: 40px;
            overflow: hidden; /* Evita que a imagem de fundo ultrapasse os limites do contêiner */
            margin-bottom: 20px;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/konva@8.3.11/konva.min.js"></script>
</head>
<body>
    <h2>Konva.js Layers Example</h2>
    <div class="container">
        <div id="konvaContainer" class="konva-container"></div>
        <input accept="image/*" type="file" id="fileInput" />
        <button id="downloadButton">Baixar Imagem</button>
    </div>
    <script>
        // Konva.js setup
        const stage = new Konva.Stage({
            container: 'konvaContainer',
            width: 300,
            height: 600
        });

        // Background Layer
        const backgroundLayer = new Konva.Layer();
        stage.add(backgroundLayer);

        // Image Layer (user's image)
        const imageLayer = new Konva.Layer();
        stage.add(imageLayer);

        // Overlay Layer (fixed image on top)
        const overlayLayer = new Konva.Layer();
        stage.add(overlayLayer);

        // Load and set background image
        const backgroundImg = new Image();
        backgroundImg.onload = function () {
            const bgKonvaImage = new Konva.Image({
                image: backgroundImg,
                x: -43,
                y: -80,
                width: stage.width(),
                height: stage.height()
            });
            backgroundLayer.add(bgKonvaImage);
            backgroundLayer.batchDraw();
        };
        backgroundImg.src = '/images/mockups/Iphone15Fundo.png';

        // Load and set overlay image with rounded corners
        const overlayImg = new Image();
        overlayImg.onload = function () {
            let cropX = 105;
            let cropY = 180;
            let cropWidth = 270;
            let cropHeight = 290;

            const overlayKonvaImage = new Konva.Image({
                image: overlayImg,
                x: 19,
                y: 9,
                width: 128,
                height: 123,
                crop: {
                    x: cropX,
                    y: cropY,
                    width: cropWidth,
                    height: cropHeight
                }
            });

            // Create a group to clip the image with rounded corners
            const group = new Konva.Group({
                x: -10,
                y: 5,
                clipFunc: function (ctx) {
                    const radius = 15;
                    const width = 300;
                    const height = 128;
                    ctx.beginPath();
                    ctx.moveTo(radius, 0);
                    ctx.arcTo(width, 0, width, height, radius);
                    ctx.arcTo(width, height, 0, height, radius);
                    ctx.arcTo(0, height, 0, 0, radius);
                    ctx.arcTo(0, 0, width, 0, radius);
                    ctx.closePath();
                    ctx.clip();
                }
            });

            group.add(overlayKonvaImage);

            // Create border rectangle
            const borderRect = new Konva.Rect({
                x: 20,
                y: 10,
                width: overlayKonvaImage.width(),
                height: 117,
                stroke: 'black',
                strokeWidth: 3,
                cornerRadius: 12
            });

            group.add(borderRect);
            overlayLayer.add(group);
            overlayLayer.batchDraw();
        };
        overlayImg.src = '/images/mockups/Iphone15Fundo.png';

        // Handle user image upload
        document.getElementById('fileInput').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const userImage = new Konva.Image({
                        image: img,
                        x: 100,
                        y: 200,
                        draggable: true,
                        width: img.width,
                        height: img.height
                    });

                    // Add the image to the layer
                    imageLayer.add(userImage);

                    // Create a transformer for the user image
                    const tr = new Konva.Transformer({
                        nodes: [userImage],
                        boundBoxFunc: function (oldBox, newBox) {
                            // Limit resizing to the canvas dimensions
                            newBox.width = Math.max(30, newBox.width);
                            newBox.height = Math.max(30, newBox.height);
                            newBox.x = Math.max(0, newBox.x);
                            newBox.y = Math.max(0, newBox.y);
                            newBox.x = Math.min(stage.width() - newBox.width, newBox.x);
                            newBox.y = Math.min(stage.height() - newBox.height, newBox.y);
                            return newBox;
                        }
                    });

                    // Add the transformer to the layer
                    imageLayer.add(tr);
                    imageLayer.draw();

                    // Make transformer active on click
                    userImage.on('click', () => {
                        tr.nodes([userImage]);
                        imageLayer.draw();
                    });

                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        });

        // Deselect transformer on stage click
        stage.on('click', (e) => {
            const clickedOnStage = e.target === stage;
            if (clickedOnStage) {
                const tr = imageLayer.findOne('Transformer');
                if (tr) {
                    tr.nodes([]);
                    imageLayer.draw();
                }
            }
        });

        // Download image button
        document.getElementById('downloadButton').addEventListener('click', function () {
            const dataURL = stage.toDataURL({ pixelRatio: 3 });
            const link = document.createElement('a');
            link.href = dataURL;
            link.download = 'konva_image.png';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        });
    </script>

</body>
</html> *@

















@* <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Konva.js Layers Example</title>
    <style>
        .container {
            display: flex;
            justify-content: center;
        }

        .konva-container {
            border: 1px solid black;
            width: 215px;
            height: 440px;
            border-radius: 40px;
            overflow: hidden; /* Evita que a imagem de fundo ultrapasse os limites do contêiner */
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/konva@8.3.11/konva.min.js"></script>
</head>
<body>
    <h2>Konva.js Layers Example</h2>
    <div class="container">
        <div id="konvaContainer" class="konva-container"></div>
    </div>
    <input accept="image/*" type="file" id="fileInput" />
    <script>
        // Konva.js setup
        const stage = new Konva.Stage({
            container: 'konvaContainer',
            width: 300, // Ajuste a largura do estágio para a largura do contêiner
            height: 600 // Ajuste a altura do estágio para a altura do contêiner
        });

        // Background Layer
        const backgroundLayer = new Konva.Layer();
        stage.add(backgroundLayer);

        // Image Layer (user's image)
        const imageLayer = new Konva.Layer();
        stage.add(imageLayer);

        // Overlay Layer (fixed image on top)
        const overlayLayer = new Konva.Layer();
        stage.add(overlayLayer);

        // Load and set background image
        const backgroundImg = new Image();
        backgroundImg.onload = function () {
            const bgKonvaImage = new Konva.Image({
                image: backgroundImg,
                x: -43,
                y: -80,
                width: stage.width(),
                height: stage.height()
            });
            backgroundLayer.add(bgKonvaImage);
            backgroundLayer.batchDraw();
        };
        backgroundImg.src = '/images/mockups/Iphone15Fundo.png';

        // Load and set overlay image with rounded corners
        const overlayImg = new Image();
        overlayImg.onload = function () {
            let cropX = 105;
            let cropY = 180;
            let cropWidth = 270;
            let cropHeight = 290;

            const overlayKonvaImage = new Konva.Image({
                image: overlayImg,
                x: 19, //11
                y: 9,
                width: 128,
                height: 123,
                crop: {
                    x: cropX,
                    y: cropY,
                    width: cropWidth,
                    height: cropHeight
                }
            });

            // Create a group to clip the image with rounded corners
            const group = new Konva.Group({
                x: -10,
                y: 5,
                clipFunc: function (ctx) {
                    const radius = 15;
                    const width = 300;
                    const height = 128;
                    ctx.beginPath();
                    ctx.moveTo(radius, 0);
                    ctx.arcTo(width, 0, width, height, radius);
                    ctx.arcTo(width, height, 0, height, radius);
                    ctx.arcTo(0, height, 0, 0, radius);
                    ctx.arcTo(0, 0, width, 0, radius);
                    ctx.closePath();
                    ctx.clip();
                }
            });

            group.add(overlayKonvaImage);

            // Create border rectangle
            const borderRect = new Konva.Rect({
                x: 20,
                y: 10,
                width: overlayKonvaImage.width(),
                height: 117,
                stroke: 'black',
                strokeWidth: 3,
                cornerRadius: 12
            });

            group.add(borderRect);
            overlayLayer.add(group);
            overlayLayer.batchDraw();
        };
        overlayImg.src = '/images/mockups/Iphone15Fundo.png'; // Your overlay image for the camera area

        // Handle user image upload
        document.getElementById('fileInput').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const userImage = new Konva.Image({
                        image: img,
                        x: 100,
                        y: 200,
                        draggable: true,
                        width: img.width, // Use original width and height of the image
                        height: img.height
                    });

                    // Add the image to the layer
                    imageLayer.add(userImage);

                    // Create a transformer for the user image
                    const tr = new Konva.Transformer({
                        nodes: [userImage],
                        boundBoxFunc: function (oldBox, newBox) {
                            // Limit resizing to the canvas dimensions
                            newBox.width = Math.max(30, newBox.width);
                            newBox.height = Math.max(30, newBox.height);
                            newBox.x = Math.max(0, newBox.x);
                            newBox.y = Math.max(0, newBox.y);
                            newBox.x = Math.min(stage.width() - newBox.width, newBox.x);
                            newBox.y = Math.min(stage.height() - newBox.height, newBox.y);
                            return newBox;
                        }
                    });

                    // Add the transformer to the layer
                    imageLayer.add(tr);
                    imageLayer.draw();

                    // Make transformer active on click
                    userImage.on('click', () => {
                        tr.nodes([userImage]);
                        imageLayer.draw();
                    });

                    // Deselect transformer on stage click
                    stage.on('click', (e) => {
                        if (e.target === stage) {
                            tr.nodes([]);
                            imageLayer.draw();
                        }
                    });

                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        });


    </script>
</body>
</html> *@

@*<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Konva.js Layers Example</title>
    <style>
        .container {
            display: flex;
            justify-content: center;
            flex-direction: column;
            align-items: center;
        }

        .konva-container {
            border: 3px solid black;
            width: 215px;
            height: 440px;
            border-radius: 40px;
            overflow: hidden; /* Evita que a imagem de fundo ultrapasse os limites do contêiner */
            margin-bottom: 20px;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/konva@8.3.11/konva.min.js"></script>
</head>
<body>
    <h2>Konva.js Layers Example</h2>
    <div class="container">
        <div id="konvaContainer" class="konva-container"></div>
        <input accept="image/*" type="file" id="fileInput" />
        <button id="downloadButton">Baixar Imagem</button>
    </div>
    <script>
        // Konva.js setup
        const stage = new Konva.Stage({
            container: 'konvaContainer',
            width: 215,
            height: 440

        });

        // Background Layer
        const backgroundLayer = new Konva.Layer();
        stage.add(backgroundLayer);

        // Image Layer (user's image)
        const imageLayer = new Konva.Layer();
        stage.add(imageLayer);

        // Overlay Layer (fixed image on top)
        const overlayLayer = new Konva.Layer();
        stage.add(overlayLayer);

        // Load and set background image
        const backgroundImg = new Image();
        backgroundImg.onload = function () {
            const bgKonvaImage = new Konva.Image({
                image: backgroundImg,
                x: -43,
                y: -80,
                width: stage.width(),
                height: stage.height()
            });
            backgroundLayer.add(bgKonvaImage);
            backgroundLayer.batchDraw();
        };
        backgroundImg.src = '/images/mockups/Iphone15Fundo.png';

        // Load and set overlay image with rounded corners
        const overlayImg = new Image();
        overlayImg.onload = function () {
            let cropX = 105;
            let cropY = 180;
            let cropWidth = 270;
            let cropHeight = 290;

            const overlayKonvaImage = new Konva.Image({
                image: overlayImg,
                x: 19,
                y: 9,
                width: 128,
                height: 123,
                crop: {
                    x: cropX,
                    y: cropY,
                    width: cropWidth,
                    height: cropHeight
                }
            });

            // Create a group to clip the image with rounded corners
            const group = new Konva.Group({
                x: -10,
                y: 5,
                clipFunc: function (ctx) {
                    const radius = 15;
                    const width = 300;
                    const height = 128;
                    ctx.beginPath();
                    ctx.moveTo(radius, 0);
                    ctx.arcTo(width, 0, width, height, radius);
                    ctx.arcTo(width, height, 0, height, radius);
                    ctx.arcTo(0, height, 0, 0, radius);
                    ctx.arcTo(0, 0, width, 0, radius);
                    ctx.closePath();
                    ctx.clip();
                }
            });

            group.add(overlayKonvaImage);

            // Create border rectangle
            const borderRect = new Konva.Rect({
                x: 20,
                y: 10,
                width: overlayKonvaImage.width(),
                height: 117,
                stroke: 'black',
                strokeWidth: 3,
                cornerRadius: 12
            });

            group.add(borderRect);
            overlayLayer.add(group);
            overlayLayer.batchDraw();
        };
        overlayImg.src = '/images/mockups/Iphone15Fundo.png';

        // Handle user image upload
        document.getElementById('fileInput').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const userImage = new Konva.Image({
                        image: img,
                        x: 100,
                        y: 200,
                        draggable: true,
                        width: img.width,
                        height: img.height
                    });

                    // Add the image to the layer
                    imageLayer.add(userImage);

                    // Create a transformer for the user image
                    const tr = new Konva.Transformer({
                        nodes: [userImage],
                        boundBoxFunc: function (oldBox, newBox) {
                            // Limit resizing to the canvas dimensions
                            newBox.width = Math.max(30, newBox.width);
                            newBox.height = Math.max(30, newBox.height);
                            newBox.x = Math.max(0, newBox.x);
                            newBox.y = Math.max(0, newBox.y);
                            newBox.x = Math.min(stage.width() - newBox.width, newBox.x);
                            newBox.y = Math.min(stage.height() - newBox.height, newBox.y);
                            return newBox;
                        }
                    });

                    // Add the transformer to the layer
                    imageLayer.add(tr);
                    imageLayer.draw();

                    // Make transformer active on click
                    userImage.on('click', () => {
                        tr.nodes([userImage]);
                        imageLayer.draw();
                    });

                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        });

        // Deselect transformer on stage click
        stage.on('click', (e) => {
            const clickedOnStage = e.target === stage;
            if (clickedOnStage) {
                const tr = imageLayer.findOne('Transformer');
                if (tr) {
                    tr.nodes([]);
                    imageLayer.draw();
                }
            }
        });

        // Download image button
        document.getElementById('downloadButton').addEventListener('click', function () {
            // Create a temporary canvas to draw the stage content
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = stage.width();
            tempCanvas.height = stage.height();
            
            const tempContext = tempCanvas.getContext('2d');

            // Draw the stage content onto the temporary canvas
            const imageObj = new Image();
            imageObj.onload = function () {
                tempContext.drawImage(imageObj, 0, 0, stage.width(), stage.height());

                // Create a temporary anchor element to trigger the download
                const link = document.createElement('a');
                link.href = tempCanvas.toDataURL();
                link.download = 'konva_image.png';

                // Trigger the download
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            };
            imageObj.src = stage.toDataURL();
        });
    </script>

</body>
</html>*@









@* <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Konva.js Layers Example</title>
    <style>
        .container {
            display: flex;
            justify-content: center;
            flex-direction: column;
            align-items: center;
        }

        .konva-container {
            border: 3px solid black;
            width: 215px;
            height: 440px;
            border-radius: 40px;
            overflow: hidden; /* Evita que a imagem de fundo ultrapasse os limites do contêiner */
            margin-bottom: 20px;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/konva@8.3.11/konva.min.js"></script>
</head>
<body>
    <h2>Konva.js Layers Example</h2>
    <div class="container">
        <div id="konvaContainer" class="konva-container"></div>
        <input accept="image/*" type="file" id="fileInput" />
        <button id="downloadButton">Baixar Imagem</button>
    </div>
    <script>
        // Konva.js setup
        const stage = new Konva.Stage({
            container: 'konvaContainer',
            width: 215,
            height: 440

        });

        // Background Layer
        const backgroundLayer = new Konva.Layer();
        stage.add(backgroundLayer);

        // Image Layer (user's image)
        const imageLayer = new Konva.Layer();
        stage.add(imageLayer);

        // Overlay Layer (fixed image on top)
        const overlayLayer = new Konva.Layer();
        stage.add(overlayLayer);

        // Load and set background image
        const backgroundImg = new Image();
        backgroundImg.onload = function () {
            const bgKonvaImage = new Konva.Image({
                image: backgroundImg,
                x: -42,
                y: -80,
                width: 296,
                height: 600
            });
            backgroundLayer.add(bgKonvaImage);
            backgroundLayer.batchDraw();
        };
        backgroundImg.src = '/images/mockups/Iphone15Fundo.png';

        // Load and set overlay image with rounded corners
        const overlayImg = new Image();
        overlayImg.onload = function () {
            let cropX = 105;
            let cropY = 180;
            let cropWidth = 270;
            let cropHeight = 290;

            const overlayKonvaImage = new Konva.Image({
                image: overlayImg,
                x: 19,
                y: 9,
                width: 128,
                height: 123,
                crop: {
                    x: cropX,
                    y: cropY,
                    width: cropWidth,
                    height: cropHeight
                }
            });

            // Create a group to clip the image with rounded corners
            const group = new Konva.Group({
                x: -10,
                y: 5,
                clipFunc: function (ctx) {
                    const radius = 15;
                    const width = 300;
                    const height = 128;
                    ctx.beginPath();
                    ctx.moveTo(radius, 0);
                    ctx.arcTo(width, 0, width, height, radius);
                    ctx.arcTo(width, height, 0, height, radius);
                    ctx.arcTo(0, height, 0, 0, radius);
                    ctx.arcTo(0, 0, width, 0, radius);
                    ctx.closePath();
                    ctx.clip();
                }
            });

            group.add(overlayKonvaImage);

            // Create border rectangle
            const borderRect = new Konva.Rect({
                x: 20,
                y: 10,
                width: overlayKonvaImage.width(),
                height: 117,
                stroke: 'black',
                strokeWidth: 3,
                cornerRadius: 12
            });

            group.add(borderRect);
            overlayLayer.add(group);
            overlayLayer.batchDraw();
        };
        overlayImg.src = '/images/mockups/Iphone15Fundo.png';

        // Handle user image upload
        document.getElementById('fileInput').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const userImage = new Konva.Image({
                        image: img,
                        x: 100,
                        y: 200,
                        draggable: true,
                        width: img.width,
                        height: img.height
                    });

                    // Add the image to the layer
                    imageLayer.add(userImage);

                    // Create a transformer for the user image
                    const tr = new Konva.Transformer({
                        nodes: [userImage],
                        boundBoxFunc: function (oldBox, newBox) {
                            // Limit resizing to the canvas dimensions
                            newBox.width = Math.max(30, newBox.width);
                            newBox.height = Math.max(30, newBox.height);
                            newBox.x = Math.max(0, newBox.x);
                            newBox.y = Math.max(0, newBox.y);
                            newBox.x = Math.min(stage.width() - newBox.width, newBox.x);
                            newBox.y = Math.min(stage.height() - newBox.height, newBox.y);
                            return newBox;
                        }
                    });

                    // Add the transformer to the layer
                    imageLayer.add(tr);
                    imageLayer.draw();

                    // Make transformer active on click
                    userImage.on('click', () => {
                        tr.nodes([userImage]);
                        imageLayer.draw();
                    });

                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        });

        // Deselect transformer on stage click
        stage.on('click', (e) => {
            const clickedOnStage = e.target === stage;
            if (clickedOnStage) {
                const tr = imageLayer.findOne('Transformer');
                if (tr) {
                    tr.nodes([]);
                    imageLayer.draw();
                }
            }
        });

        // Download image button
        document.getElementById('downloadButton').addEventListener('click', function () {
            // Create a temporary canvas to draw the stage content
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = stage.width();
            tempCanvas.height = stage.height();
            const tempContext = tempCanvas.getContext('2d');

            // Draw the stage content onto the temporary canvas
            const imageObj = new Image();
            imageObj.onload = function () {
                // Clip the canvas to create rounded corners
                tempContext.beginPath();
                const radius = 40; // Raio do border-radius
                tempContext.moveTo(radius, 0);
                tempContext.arcTo(tempCanvas.width, 0, tempCanvas.width, tempCanvas.height, radius);
                tempContext.arcTo(tempCanvas.width, tempCanvas.height, 0, tempCanvas.height, radius);
                tempContext.arcTo(0, tempCanvas.height, 0, 0, radius);
                tempContext.arcTo(0, 0, tempCanvas.width, 0, radius);
                tempContext.closePath();
                tempContext.clip();

                tempContext.drawImage(imageObj, 0, 0, tempCanvas.width, tempCanvas.height);

                // Create a temporary anchor element to trigger the download
                const link = document.createElement('a');
                link.href = tempCanvas.toDataURL();
                link.download = 'konva_image.png';

                // Trigger the download
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            };
            imageObj.src = stage.toDataURL();
        });

    </script>

</body>
</html> *@

<!--QUASE DANDO CERTO-->

@* <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Konva.js Layers Example</title>
    <style>
        .container {
            display: flex;
            justify-content: center;
            flex-direction: column;
            align-items: center;
        }

        .konva-container {
            border: 3px solid black;
            width: 215px;
            height: 440px;
            border-radius: 40px;
            overflow: hidden; /* Evita que a imagem de fundo ultrapasse os limites do contêiner */
            margin-bottom: 20px;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/konva@8.3.11/konva.min.js"></script>
</head>
<body>
    <h2>Konva.js Layers Example</h2>
    <div class="container">
        <div id="konvaContainer" class="konva-container"></div>
        <input accept="image/*" type="file" id="fileInput" />
        <button id="downloadButton">Baixar Imagem</button>
    </div>
    <script>
        // Konva.js setup
        const stage = new Konva.Stage({
            container: 'konvaContainer',
            width: 215,
            height: 440
        });

        // Background Layer
        const backgroundLayer = new Konva.Layer();
        stage.add(backgroundLayer);

        // Image Layer (user's image)
        const imageLayer = new Konva.Layer();
        stage.add(imageLayer);

        // Overlay Layer (fixed image on top)
        const overlayLayer = new Konva.Layer();
        stage.add(overlayLayer);

        // Load and set background image
        const backgroundImg = new Image();
        backgroundImg.onload = function () {
            const bgKonvaImage = new Konva.Image({
                image: backgroundImg,
                x: -42,
                y: -80,
                width: 296,
                height: 600
            });
            backgroundLayer.add(bgKonvaImage);
            backgroundLayer.batchDraw();
        };
        backgroundImg.src = '/images/mockups/Iphone15Fundo.png';

        // Load and set overlay image with rounded corners
        const overlayImg = new Image();
        overlayImg.onload = function () {
            let cropX = 105;
            let cropY = 180;
            let cropWidth = 270;
            let cropHeight = 290;

            const overlayKonvaImage = new Konva.Image({
                image: overlayImg,
                x: 19,
                y: 9,
                width: 128,
                height: 123,
                crop: {
                    x: cropX,
                    y: cropY,
                    width: cropWidth,
                    height: cropHeight
                }
            });

            // Create a group to clip the image with rounded corners
            const group = new Konva.Group({
                x: -10,
                y: 5,
                clipFunc: function (ctx) {
                    const radius = 15;
                    const width = 300;
                    const height = 128;
                    ctx.beginPath();
                    ctx.moveTo(radius, 0);
                    ctx.arcTo(width, 0, width, height, radius);
                    ctx.arcTo(width, height, 0, height, radius);
                    ctx.arcTo(0, height, 0, 0, radius);
                    ctx.arcTo(0, 0, width, 0, radius);
                    ctx.closePath();
                    ctx.clip();
                }
            });

            group.add(overlayKonvaImage);

            // Create border rectangle
            const borderRect = new Konva.Rect({
                x: 20,
                y: 10,
                width: overlayKonvaImage.width(),
                height: 117,
                stroke: 'black',
                strokeWidth: 3,
                cornerRadius: 12
            });

            group.add(borderRect);
            overlayLayer.add(group);
            overlayLayer.batchDraw();
        };
        overlayImg.src = '/images/mockups/Iphone15Fundo.png';

        // Handle user image upload
        document.getElementById('fileInput').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const userImage = new Konva.Image({
                        image: img,
                        x: 50,
                        y: 50,
                        draggable: true,
                        width: img.width,
                        height: img.height
                    });

                    // Add the image to the layer
                    imageLayer.add(userImage);

                    // Create a transformer for the user image
                    const tr = new Konva.Transformer({
                        nodes: [userImage],
                        boundBoxFunc: function (oldBox, newBox) {
                            // Limit resizing to the canvas dimensions
                            newBox.width = Math.max(30, newBox.width);
                            newBox.height = Math.max(30, newBox.height);
                            newBox.x = Math.max(0, newBox.x);
                            newBox.y = Math.max(0, newBox.y);
                            newBox.x = Math.min(stage.width() - newBox.width, newBox.x);
                            newBox.y = Math.min(stage.height() - newBox.height, newBox.y);
                            return newBox;
                        }
                    });

                    // Add the transformer to the layer
                    imageLayer.add(tr);
                    imageLayer.draw();

                    // Make transformer active on click
                    userImage.on('click', (e) => {
                        e.cancelBubble = true;
                        tr.nodes([userImage]);
                        imageLayer.draw();
                    });

                    // Deselect transformer on stage click
                    stage.on('click', (e) => {
                        // Only deselect if clicked on empty area
                        if (e.target === stage) {
                            tr.nodes([]);
                            imageLayer.draw();
                        }
                    });

                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        });

        // Download image button
        document.getElementById('downloadButton').addEventListener('click', function () {
            // Create a temporary canvas to draw the stage content
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = stage.width();
            tempCanvas.height = stage.height();
            const tempContext = tempCanvas.getContext('2d');

            // Draw the stage content onto the temporary canvas
            const imageObj = new Image();
            imageObj.onload = function () {
                // Clip the canvas to create rounded corners
                tempContext.beginPath();
                const radius = 40; // Raio do border-radius
                tempContext.moveTo(radius, 0);
                tempContext.arcTo(tempCanvas.width, 0, tempCanvas.width, tempCanvas.height, radius);
                tempContext.arcTo(tempCanvas.width, tempCanvas.height, 0, tempCanvas.height, radius);
                tempContext.arcTo(0, tempCanvas.height, 0, 0, radius);
                tempContext.arcTo(0, 0, tempCanvas.width, 0, radius);
                tempContext.closePath();
                tempContext.clip();

                tempContext.drawImage(imageObj, 0, 0, tempCanvas.width, tempCanvas.height);

                // Create a temporary anchor element to trigger the download
                const link = document.createElement('a');
                link.href = tempCanvas.toDataURL();
                link.download = 'konva_image.png';

                // Trigger the download
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            };
            // Ensure image is deselected before downloading
            const tr = imageLayer.findOne('Transformer');
            if (tr) {
                tr.nodes([]);
                imageLayer.draw();
            }
            imageObj.src = stage.toDataURL();
        });

    </script>

</body>
</html> *@



<!--DEU CERTOOOOOOOO-->



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Konva.js Layers Example</title>
    <style>
        .container {
            display: flex;
            justify-content: center;
            flex-direction: column;
            align-items: center;
        }

        .konva-container {
            border: 3px solid black;
            width: 215px;
            height: 440px;
            border-radius: 40px;
            overflow: hidden; /* Evita que a imagem de fundo ultrapasse os limites do contêiner */
            margin-bottom: 20px;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/konva@8.3.11/konva.min.js"></script>
</head>
<body>
    <h2>Konva.js Layers Example</h2>
    <div class="container">
        <div id="konvaContainer" class="konva-container"></div>
        <input accept="image/*" type="file" id="fileInput" />
        <button id="downloadButton">Baixar Imagem</button>
    </div>
    <script>
        // Konva.js setup
        const stage = new Konva.Stage({
            container: 'konvaContainer',
            width: 215,
            height: 440
        });

        // Background Layer
        const backgroundLayer = new Konva.Layer();
        stage.add(backgroundLayer);

        // Image Layer (user's image)
        const imageLayer = new Konva.Layer();
        stage.add(imageLayer);

        // Overlay Layer (fixed image on top)
        const overlayLayer = new Konva.Layer();
        stage.add(overlayLayer);

        // Load and set background image
        const backgroundImg = new Image();
        backgroundImg.onload = function () {
            const bgKonvaImage = new Konva.Image({
                image: backgroundImg,
                x: -42,
                y: -80,
                width: 296,
                height: 600
            });
            backgroundLayer.add(bgKonvaImage);
            backgroundLayer.batchDraw();
        };
        backgroundImg.src = '/images/mockups/Iphone15Fundo.png';

        // Load and set overlay image with rounded corners
        const overlayImg = new Image();
        overlayImg.onload = function () {
            let cropX = 105;
            let cropY = 180;
            let cropWidth = 270;
            let cropHeight = 290;

            const overlayKonvaImage = new Konva.Image({
                image: overlayImg,
                x: 19,
                y: 9,
                width: 128,
                height: 123,
                crop: {
                    x: cropX,
                    y: cropY,
                    width: cropWidth,
                    height: cropHeight
                }
            });

            // Create a group to clip the image with rounded corners
            const group = new Konva.Group({
                x: -10,
                y: 5,
                clipFunc: function (ctx) {
                    const radius = 15;
                    const width = 300;
                    const height = 128;
                    ctx.beginPath();
                    ctx.moveTo(radius, 0);
                    ctx.arcTo(width, 0, width, height, radius);
                    ctx.arcTo(width, height, 0, height, radius);
                    ctx.arcTo(0, height, 0, 0, radius);
                    ctx.arcTo(0, 0, width, 0, radius);
                    ctx.closePath();
                    ctx.clip();
                }
            });

            group.add(overlayKonvaImage);

            // Create border rectangle
            const borderRect = new Konva.Rect({
                x: 20,
                y: 10,
                width: overlayKonvaImage.width(),
                height: 117,
                stroke: 'black',
                strokeWidth: 3,
                cornerRadius: 12
            });

            group.add(borderRect);
            overlayLayer.add(group);
            overlayLayer.batchDraw();
        };
        overlayImg.src = '/images/mockups/Iphone15Fundo.png';

        // Handle user image upload
        document.getElementById('fileInput').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const userImage = new Konva.Image({
                        image: img,
                        x: 50,
                        y: 50,
                        draggable: true,
                        width: img.width,
                        height: img.height
                    });

                    // Add the image to the layer
                    imageLayer.add(userImage);

                    // Create a transformer for the user image
                    const tr = new Konva.Transformer({
                        nodes: [userImage],
                        boundBoxFunc: function (oldBox, newBox) {
                            // Limit resizing to the canvas dimensions
                            newBox.width = Math.max(30, newBox.width);
                            newBox.height = Math.max(30, newBox.height);
                            newBox.x = Math.max(0, newBox.x);
                            newBox.y = Math.max(0, newBox.y);
                            newBox.x = Math.min(stage.width() - newBox.width, newBox.x);
                            newBox.y = Math.min(stage.height() - newBox.height, newBox.y);
                            return newBox;
                        }
                    });

                    // Add the transformer to the layer
                    imageLayer.add(tr);
                    imageLayer.draw();

                    // Make transformer active on click
                    userImage.on('click', (e) => {
                        e.cancelBubble = true;
                        tr.nodes([userImage]);
                        imageLayer.draw();
                    });

                    // Deselect transformer on stage click
                    stage.on('click', (e) => {
                        if (e.target === stage) {
                            tr.nodes([]);
                            imageLayer.draw();
                        }
                    });

                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        });

        // Deselect transformer on document click
        document.addEventListener('click', (e) => {
            const konvaContainer = document.getElementById('konvaContainer');
            if (!konvaContainer.contains(e.target)) {
                const tr = imageLayer.findOne('Transformer');
                if (tr) {
                    tr.nodes([]);
                    imageLayer.draw();
                }
            }
        });

        // Download image button
        document.getElementById('downloadButton').addEventListener('click', function () {
            // Create a temporary canvas to draw the stage content
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = stage.width();
            tempCanvas.height = stage.height();
            const tempContext = tempCanvas.getContext('2d');

            // Draw the stage content onto the temporary canvas
            const imageObj = new Image();
            imageObj.onload = function () {
                // Clip the canvas to create rounded corners
                tempContext.beginPath();
                const radius = 40; // Raio do border-radius
                tempContext.moveTo(radius, 0);
                tempContext.arcTo(tempCanvas.width, 0, tempCanvas.width, tempCanvas.height, radius);
                tempContext.arcTo(tempCanvas.width, tempCanvas.height, 0, tempCanvas.height, radius);
                tempContext.arcTo(0, tempCanvas.height, 0, 0, radius);
                tempContext.arcTo(0, 0, tempCanvas.width, 0, radius);
                tempContext.closePath();
                tempContext.clip();

                tempContext.drawImage(imageObj, 0, 0, tempCanvas.width, tempCanvas.height);

                // Create a temporary anchor element to trigger the download
                const link = document.createElement('a');
                link.href = tempCanvas.toDataURL();
                link.download = 'konva_image.png';

                // Trigger the download
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            };
            // Ensure image is deselected before downloading
            const tr = imageLayer.findOne('Transformer');
            if (tr) {
                tr.nodes([]);
                imageLayer.draw();
            }
            imageObj.src = stage.toDataURL();
        });

    </script>

</body>
</html>




@* <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Konva.js Layers Example</title>
    <style>
        .container {
            display: flex;
            justify-content: center;
            flex-direction: column;
            align-items: center;
        }

        .konva-container {
            border: 3px solid black;
            width: 215px;
            height: 440px;
            border-radius: 40px;
            overflow: hidden; /* Evita que a imagem de fundo ultrapasse os limites do contêiner */
            margin-bottom: 20px;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/konva@8.3.11/konva.min.js"></script>
</head>
<body>
    <h2>Konva.js Layers Example</h2>
    <div class="container">
        <div>
            <label for="marca">Marca:</label>
            <select id="marca" class="form-select">
                <option value="">Selecione uma marca</option>
                <option value="Iphone">Iphone</option>
                <option value="Samsung">Samsung</option>
            </select>

            <label for="modelo">Modelo:</label>
            <select id="modelo" class="form-select">
                <option value="">Selecione um modelo</option>
            </select>
        </div>
        <div id="konvaContainer" class="konva-container"></div>
        <input accept="image/*" type="file" id="fileInput" />
        <button id="downloadButton">Baixar Imagem</button>
    </div>
    <script>
        // Konva.js setup
        const stage = new Konva.Stage({
            container: 'konvaContainer',
            width: 215,
            height: 440
        });

        // Background Layer
        const backgroundLayer = new Konva.Layer();
        stage.add(backgroundLayer);

        // Image Layer (user's image)
        const imageLayer = new Konva.Layer();
        stage.add(imageLayer);

        // Overlay Layer (fixed image on top)
        const overlayLayer = new Konva.Layer();
        stage.add(overlayLayer);

        // Load and set background image
        let backgroundImg = new Image();

        function setBackgroundImage(src) {
            backgroundImg.onload = function () {
                backgroundLayer.destroyChildren(); // Remove existing background image
                const bgKonvaImage = new Konva.Image({
                    image: backgroundImg,
                    x: -42,
                    y: -80,
                    width: 296,
                    height: 600
                });
                backgroundLayer.add(bgKonvaImage);
                backgroundLayer.batchDraw();
            };
            backgroundImg.src = src; ///////////



            // Load and set overlay image with rounded corners
            const overlayImg = new Image();
            overlayImg.onload = function () {
                let cropX = 105;
                let cropY = 180;
                let cropWidth = 270;
                let cropHeight = 290;

                const overlayKonvaImage = new Konva.Image({
                    image: overlayImg,
                    x: 19,
                    y: 9,
                    width: 128,
                    height: 123,
                    crop: {
                        x: cropX,
                        y: cropY,
                        width: cropWidth,
                        height: cropHeight
                    }
                });

                // Create a group to clip the image with rounded corners
                const group = new Konva.Group({
                    x: -10,
                    y: 5,
                    clipFunc: function (ctx) {
                        const radius = 15;
                        const width = 300;
                        const height = 128;
                        ctx.beginPath();
                        ctx.moveTo(radius, 0);
                        ctx.arcTo(width, 0, width, height, radius);
                        ctx.arcTo(width, height, 0, height, radius);
                        ctx.arcTo(0, height, 0, 0, radius);
                        ctx.arcTo(0, 0, width, 0, radius);
                        ctx.closePath();
                        ctx.clip();
                    }
                });

                group.add(overlayKonvaImage);

                // Create border rectangle
                const borderRect = new Konva.Rect({
                    x: 20,
                    y: 10,
                    width: overlayKonvaImage.width(),
                    height: 117,
                    stroke: 'black',
                    strokeWidth: 3,
                    cornerRadius: 12
                });

                group.add(borderRect);
                overlayLayer.add(group);
                overlayLayer.batchDraw();
            };
            overlayImg.src = '/images/mockups/Iphone15Fundo.png'; //////
        }


        // Handle user image upload
        document.getElementById('fileInput').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const userImage = new Konva.Image({
                        image: img,
                        x: 50,
                        y: 50,
                        draggable: true,
                        width: img.width,
                        height: img.height
                    });

                    // Add the image to the layer
                    imageLayer.add(userImage);

                    // Create a transformer for the user image
                    const tr = new Konva.Transformer({
                        nodes: [userImage],
                        boundBoxFunc: function (oldBox, newBox) {
                            // Limit resizing to the canvas dimensions
                            newBox.width = Math.max(30, newBox.width);
                            newBox.height = Math.max(30, newBox.height);
                            newBox.x = Math.max(0, newBox.x);
                            newBox.y = Math.max(0, newBox.y);
                            newBox.x = Math.min(stage.width() - newBox.width, newBox.x);
                            newBox.y = Math.min(stage.height() - newBox.height, newBox.y);
                            return newBox;
                        }
                    });

                    // Add the transformer to the layer
                    imageLayer.add(tr);
                    imageLayer.draw();

                    // Make transformer active on click
                    userImage.on('click', (e) => {
                        e.cancelBubble = true;
                        tr.nodes([userImage]);
                        imageLayer.draw();
                    });

                    // Deselect transformer on stage click
                    stage.on('click', (e) => {
                        if (e.target === stage) {
                            tr.nodes([]);
                            imageLayer.draw();
                        }
                    });

                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        });

        // Deselect transformer on document click
        document.addEventListener('click', (e) => {
            const konvaContainer = document.getElementById('konvaContainer');
            if (!konvaContainer.contains(e.target)) {
                const tr = imageLayer.findOne('Transformer');
                if (tr) {
                    tr.nodes([]);
                    imageLayer.draw();
                }
            }
        });

        // Download image button
        document.getElementById('downloadButton').addEventListener('click', function () {
            // Create a temporary canvas to draw the stage content
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = stage.width();
            tempCanvas.height = stage.height();
            const tempContext = tempCanvas.getContext('2d');

            // Draw the stage content onto the temporary canvas
            const imageObj = new Image();
            imageObj.onload = function () {
                // Clip the canvas to create rounded corners
                tempContext.beginPath();
                const radius = 40; // Raio do border-radius
                tempContext.moveTo(radius, 0);
                tempContext.arcTo(tempCanvas.width, 0, tempCanvas.width, tempCanvas.height, radius);
                tempContext.arcTo(tempCanvas.width, tempCanvas.height, 0, tempCanvas.height, radius);
                tempContext.arcTo(0, tempCanvas.height, 0, 0, radius);
                tempContext.arcTo(0, 0, tempCanvas.width, 0, radius);
                tempContext.closePath();
                tempContext.clip();

                tempContext.drawImage(imageObj, 0, 0, tempCanvas.width, tempCanvas.height);

                // Create a temporary anchor element to trigger the download
                const link = document.createElement('a');
                link.href = tempCanvas.toDataURL();
                link.download = 'konva_image.png';

                // Trigger the download
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            };
            // Ensure image is deselected before downloading
            const tr = imageLayer.findOne('Transformer');
            if (tr) {
                tr.nodes([]);
                imageLayer.draw();
            }
            imageObj.src = stage.toDataURL();
        });

        // Marca e modelo dropdowns
        const marcaSelect = document.getElementById('marca');
        const modeloSelect = document.getElementById('modelo');

        marcaSelect.addEventListener('change', function () {
            const marca = this.value;
            let modelos = [];
            if (marca === 'Iphone') {
                modelos = ['15 Pro Max', '14', '13'];
            } else if (marca === 'Samsung') {
                modelos = ['S24', 'Note 10', 'A50'];
            }

            modeloSelect.innerHTML = '<option value="">Selecione um modelo</option>';
            modelos.forEach(modelo => {
                const option = document.createElement('option');
                option.value = modelo;
                option.text = modelo;
                modeloSelect.appendChild(option);
            });
        });

        modeloSelect.addEventListener('change', function () {
            const modelo = this.value;
            if (modelo === '15 Pro Max') {
                setBackgroundImage('/images/mockups/Iphone15Fundo.png');
            } else if (modelo === '14') {
                setBackgroundImage('/images/mockups/Iphone14Fundo.png');
            } else if (modelo === 'S24') {
                setBackgroundImage('/images/mockups/SamsungS24Fundo.png');
            } else if (modelo === 'Note 10') {
                setBackgroundImage('/images/mockups/SamsungNote10Fundo.png');
            }
            // Adicione mais condições conforme necessário para outros modelos
        });
    </script>
</body>
</html>
 *@

<!--Acima é o backup e abaixo -->
@* @model SiteMagicCover.ViewModels.CapinhaViewModel
@using Microsoft.AspNetCore.Identity
@{
    var userName = User.Identity.Name;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Konva.js Layers Example</title>
    <style>
        .container {
            display: flex;
            justify-content: center;
            flex-direction: column;
            align-items: center;
        }

        .konva-container {
            border: 3px solid black;
            width: 215px;
            height: 440px;
            border-radius: 40px;
            overflow: hidden;
            margin-bottom: 20px;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/konva@8.3.11/konva.min.js"></script>
</head>
<body>
    <h2>Konva.js Layers Example</h2>
    <form id="customizarForm" asp-action="Customizar" method="post" enctype="multipart/form-data">
        <div class="container">
            <div>
                <label for="marca">Marca:</label>
                <select id="marca" class="form-select" name="Marca">
                    <option value="">Selecione uma marca</option>
                    <option value="Iphone">Iphone</option>
                    <option value="Samsung">Samsung</option>
                </select>

                <label for="modelo">Modelo:</label>
                <select id="modelo" class="form-select">
                    <option value="">Selecione um modelo</option>
                </select>
            </div>
            <div id="konvaContainer" class="konva-container"></div>
            <input  accept="image/*" type="file" id="fileInput" class="form-control" />
            <button type="button" id="downloadButton">Baixar Imagem</button>

            <input type="hidden" id="finalImage" name="FinalImage" />
            <input type="hidden" id="precoHidden" name="Preco" value="40,35" />
            <input type="hidden" id="nomeCelularInput" name="NomeCelular" value="capinha" />
            <input  type="hidden" id="finalImage" name="finalImage" />
            <input type="hidden" id="marcaHidden" name="Marca" />
            <input type="hidden" id="modeloHidden" name="Modelo"  />
            <input type="hidden" id="disponibilidadeInput" name="Disponibilidade" />
            <input type="hidden" id="isPersonalizadaInput" name="IsPersonalizada" />
            <input type="hidden" id="categoriaIdInput" name="CategoriaId" />



            <input  type="submit" value="Customizar" class="btn btn-outline-primary" />
        </div>
    </form>
    <script>
        // Konva.js setup
        const stage = new Konva.Stage({
            container: 'konvaContainer',
            width: 215,
            height: 440
        });

        const backgroundLayer = new Konva.Layer();
        stage.add(backgroundLayer);

        const imageLayer = new Konva.Layer();
        stage.add(imageLayer);

        const overlayLayer = new Konva.Layer();
        stage.add(overlayLayer);

        let backgroundImg = new Image();
        let overlayImg = new Image();

        function setBackgroundImage(backgroundSrc, overlaySrc) {
            backgroundImg.onload = function () {
                backgroundLayer.destroyChildren();
                const bgKonvaImage = new Konva.Image({
                    image: backgroundImg,
                    x: -42,
                    y: -80,
                    width: 296,
                    height: 600
                });
                backgroundLayer.add(bgKonvaImage);
                backgroundLayer.batchDraw();
            };
            backgroundImg.src = backgroundSrc;

            overlayImg.onload = function () {
                overlayLayer.destroyChildren();

                let cropX = 105;
                let cropY = 180;
                let cropWidth = 270;
                let cropHeight = 290;

                const overlayKonvaImage = new Konva.Image({
                    image: overlayImg,
                    x: 19,
                    y: 9,
                    width: 128,
                    height: 123,
                    crop: {
                        x: cropX,
                        y: cropY,
                        width: cropWidth,
                        height: cropHeight
                    }
                });

                const group = new Konva.Group({
                    x: -10,
                    y: 5,
                    clipFunc: function (ctx) {
                        const radius = 15;
                        const width = 300;
                        const height = 128;
                        ctx.beginPath();
                        ctx.moveTo(radius, 0);
                        ctx.arcTo(width, 0, width, height, radius);
                        ctx.arcTo(width, height, 0, height, radius);
                        ctx.arcTo(0, height, 0, 0, radius);
                        ctx.arcTo(0, 0, width, 0, radius);
                        ctx.closePath();
                        ctx.clip();
                    }
                });

                group.add(overlayKonvaImage);

                const borderRect = new Konva.Rect({
                    x: 20,
                    y: 10,
                    width: overlayKonvaImage.width(),
                    height: 117,
                    stroke: 'black',
                    strokeWidth: 3,
                    cornerRadius: 12
                });

                group.add(borderRect);
                overlayLayer.add(group);
                overlayLayer.batchDraw();
            };
            overlayImg.src = overlaySrc;
        }

        document.getElementById('fileInput').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const userImage = new Konva.Image({
                        image: img,
                        x: 50,
                        y: 50,
                        draggable: true,
                        width: img.width,
                        height: img.height
                    });

                    imageLayer.add(userImage);

                    const tr = new Konva.Transformer({
                        nodes: [userImage],
                        boundBoxFunc: function (oldBox, newBox) {
                            newBox.width = Math.max(30, newBox.width);
                            newBox.height = Math.max(30, newBox.height);
                            newBox.x = Math.max(0, newBox.x);
                            newBox.y = Math.max(0, newBox.y);
                            newBox.x = Math.min(stage.width() - newBox.width, newBox.x);
                            newBox.y = Math.min(stage.height() - newBox.height, newBox.y);
                            return newBox;
                        }
                    });

                    imageLayer.add(tr);
                    imageLayer.draw();

                    userImage.on('click', (e) => {
                        e.cancelBubble = true;
                        tr.nodes([userImage]);
                        imageLayer.draw();
                    });

                    stage.on('click', (e) => {
                        if (e.target === stage) {
                            tr.nodes([]);
                            imageLayer.draw();
                        }
                    });

                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        });

        document.addEventListener('click', (e) => {
            const konvaContainer = document.getElementById('konvaContainer');
            if (!konvaContainer.contains(e.target)) {
                const tr = imageLayer.findOne('Transformer');
                if (tr) {
                    tr.nodes([]);
                    imageLayer.draw();
                }
            }
        });

        document.getElementById('downloadButton').addEventListener('click', function () {
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = stage.width();
            tempCanvas.height = stage.height();
            const tempContext = tempCanvas.getContext('2d');

            const imageObj = new Image();
            imageObj.onload = function () {
                tempContext.beginPath();
                const radius = 40;
                tempContext.moveTo(radius, 0);
                tempContext.arcTo(tempCanvas.width, 0, tempCanvas.width, tempCanvas.height, radius);
                tempContext.arcTo(tempCanvas.width, tempCanvas.height, 0, tempCanvas.height, radius);
                tempContext.arcTo(0, tempCanvas.height, 0, 0, radius);
                tempContext.arcTo(0, 0, tempCanvas.width, 0, radius);
                tempContext.closePath();
                tempContext.clip();

                tempContext.drawImage(imageObj, 0, 0, tempCanvas.width, tempCanvas.height);

                const link = document.createElement('a');
                link.href = tempCanvas.toDataURL();
                link.download = 'konva_image.png';

                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            };
            const tr = imageLayer.findOne('Transformer');
            if (tr) {
                tr.nodes([]);
                imageLayer.draw();
            }
            imageObj.src = stage.toDataURL();
        });

        const marcaSelect = document.getElementById('marca');
        const modeloSelect = document.getElementById('modelo');

        marcaSelect.addEventListener('change', function () {
            const marca = this.value;
            let modelos = [];

            document.getElementById('marcaHidden').value = marca;

            if (marca === 'Iphone') {
                modelos = ['15 Pro Max', '14', '13'];
            } else if (marca === 'Samsung') {
                modelos = ['S24', 'Note 10', 'A50'];
            }

            modeloSelect.innerHTML = '';
            modelos.forEach(function (modelo) {
                const option = document.createElement('option');
                option.value = modelo;
                option.text = modelo;
                modeloSelect.appendChild(option);
            });

            modeloSelect.dispatchEvent(new Event('change'));
        });

        modeloSelect.addEventListener('change', function () {
            const modelo = this.value;
            let backgroundSrc = '';
            let overlaySrc = '';

            document.getElementById('modeloHidden').value = modelo;

            if (marcaSelect.value === 'Iphone') {
                if (modelo === '15 Pro Max') {
                    backgroundSrc = '/images/mockups/Iphone15Fundo.png';
                    overlaySrc = '/images/mockups/Iphone15Fundo.png';
                } else if (modelo === '14') {
                    backgroundSrc = '/images/mockups/Iphone14Fundo.png';
                    overlaySrc = '/images/mockups/Iphone14Overlay.png';
                } else if (modelo === '13') {
                    backgroundSrc = '/images/mockups/Iphone13Fundo.png';
                    overlaySrc = '/images/mockups/Iphone13Overlay.png';
                }
            } else if (marcaSelect.value === 'Samsung') {
                if (modelo === 'S24') {
                    backgroundSrc = '/images/mockups/SamsungS24Fundo.png';
                    overlaySrc = '/images/mockups/SamsungS24Fundo.png';
                } else if (modelo === 'Note 10') {
                    backgroundSrc = '/images/mockups/SamsungNote10Fundo.png';
                    overlaySrc = '/images/mockups/SamsungNote10Overlay.png';
                } else if (modelo === 'A50') {
                    backgroundSrc = '/images/mockups/SamsungA50Fundo.png';
                    overlaySrc = '/images/mockups/SamsungA50Overlay.png';
                }
            }

            setBackgroundImage(backgroundSrc, overlaySrc);
        });



        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('precoHidden').value = '40,35';

            const nomeCelularInput = document.getElementById('nomeCelularInput');
            nomeCelularInput.value = '@userName' + "Capinha";

            const disponibilidadeInput = document.getElementById('disponibilidadeInput');
            const isPersonalizadaInput = document.getElementById('isPersonalizadaInput');
            // Defina o valor do campo Disponibilidade como true
            disponibilidadeInput.value = "True";
            // Defina o valor do campo IsPersonalizada como false
            isPersonalizadaInput.value = "True";

            const categoriaIdInput = document.getElementById('categoriaIdInput');

            // Defina o valor do campo CategoriaId como 3 (inteiro)
            categoriaIdInput.value = 3;


        });
       



        if (marcaSelect.value) {
            modeloSelect.dispatchEvent(new Event('change'));
        }

       
        document.getElementById('customizarForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const finalImageField = document.getElementById('finalImage');
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = stage.width();
            tempCanvas.height = stage.height();
            const tempContext = tempCanvas.getContext('2d');

            const radius = 40; // Define the radius for rounded corners

            // Draw the background image
            const backgroundImageObj = new Image();
            backgroundImageObj.onload = function () {
                // Clip the canvas for rounded corners
                tempContext.beginPath();
                tempContext.moveTo(radius, 0);
                tempContext.arcTo(tempCanvas.width, 0, tempCanvas.width, tempCanvas.height, radius);
                tempContext.arcTo(tempCanvas.width, tempCanvas.height, 0, tempCanvas.height, radius);
                tempContext.arcTo(0, tempCanvas.height, 0, 0, radius);
                tempContext.arcTo(0, 0, tempCanvas.width, 0, radius);
                tempContext.closePath();
                tempContext.clip();

                tempContext.drawImage(backgroundImageObj, 0, 0, tempCanvas.width, tempCanvas.height);

                // Draw the overlay image
                const overlayImageObj = new Image();
                overlayImageObj.onload = function () {
                    tempContext.drawImage(overlayImageObj, 0, 0, tempCanvas.width, tempCanvas.height);

                    // Draw the user uploaded image
                    const userImageObj = new Image();
                    userImageObj.onload = function () {
                        tempContext.drawImage(userImageObj, 0, 0, tempCanvas.width, tempCanvas.height);

                        // Get the final image as base64
                        finalImageField.value = tempCanvas.toDataURL();
                        document.getElementById('customizarForm').submit();
                    };
                    userImageObj.src = stage.toDataURL();
                };
                overlayImageObj.src = overlayImg.src; // Use the src from your overlay image
            };
            backgroundImageObj.src = backgroundImg.src; // Use the src from your background image
        });


    </script>
</body>
</html> *@


@model SiteMagicCover.ViewModels.CapinhaViewModel
@using Microsoft.AspNetCore.Identity
@{
    var userName = User.Identity.Name;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Konva.js Layers Example</title>
    <style>
        .container {
            display: flex;
            justify-content: center;
            flex-direction: column;
            align-items: center;
        }

        .konva-container {
            border: 3px solid black;
            width: 215px;
            height: 440px;
            border-radius: 40px;
            overflow: hidden;
            margin-bottom: 20px;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/konva@8.3.11/konva.min.js"></script>
    
</head>
<body>
    <h2 align="center">Monte sua Capinha:</h2>
    <form id="customizarForm" asp-action="Customizar" method="post" enctype="multipart/form-data">
        <div class="container">
            <div>
                <label for="marca">Marca:</label>
                <select id="marca" class="form-select" name="Marca">
                    <option value="">Selecione uma marca</option>
                    <option value="Iphone">Iphone</option>
                    <option value="Samsung">Samsung</option>
                </select>

                <label for="modelo">Modelo:</label>
                <select id="modelo" class="form-select">
                    <option value="">Selecione um modelo</option>
                </select>
            </div>
            <div id="konvaContainer" class="konva-container"></div>
            <input accept="image/*" type="file" id="fileInput" class="form-control" />
            @*<button type="button" id="downloadButton">Baixar Imagem</button>*@ 

            <input type="hidden" id="finalImage" name="FinalImage" />
            <input type="hidden" id="precoHidden" name="Preco" value="40,35" />
            <input type="hidden" id="nomeCelularInput" name="NomeCelular" value="capinha" />
            <input type="hidden" id="marcaHidden" name="Marca" />
            <input type="hidden" id="modeloHidden" name="Modelo" />
            <input type="hidden" id="disponibilidadeInput" name="Disponibilidade" />
            <input type="hidden" id="isPersonalizadaInput" name="IsPersonalizada" />
            <input type="hidden" id="categoriaIdInput" name="CategoriaId" />

            <input type="submit" value="Customizar" class="btn btn-outline-primary" />
        </div>
    </form>
    <script>
        // Konva.js setup
        const stage = new Konva.Stage({
            container: 'konvaContainer',
            width: 215,
            height: 440
        });

        const backgroundLayer = new Konva.Layer();
        stage.add(backgroundLayer);

        const imageLayer = new Konva.Layer();
        stage.add(imageLayer);

        const overlayLayer = new Konva.Layer();
        stage.add(overlayLayer);

        let backgroundImg = new Image();
        let overlayImg = new Image();

        function setBackgroundImage(backgroundSrc, overlaySrc, model) {
            backgroundImg.onload = function () {
                backgroundLayer.destroyChildren();
                const bgKonvaImage = new Konva.Image({
                    image: backgroundImg,
                    x: -42,
                    y: -80,
                    width: 296,
                    height: 600
                });
                backgroundLayer.add(bgKonvaImage);
                backgroundLayer.batchDraw();
            };
            backgroundImg.src = backgroundSrc;

            overlayImg.onload = function () {
                overlayLayer.destroyChildren();

                let cropX, cropY, cropWidth, cropHeight, overlayX, overlayY, overlayWidth, overlayHeight, groupX, groupY, groupWidth, groupHeight, borderX, borderY, borderWidth, borderHeight, borderRadius;

                if (model === 'Iphone15ProMax') {
                    cropX = 105;
                    cropY = 180;
                    cropWidth = 270;
                    cropHeight = 290;
                    overlayX = 19;
                    overlayY = 9;
                    overlayWidth = 128;
                    overlayHeight = 123;
                    groupX = -10;
                    groupY = 5;
                    groupWidth = 300;
                    groupHeight = 128;
                    borderX = 20;
                    borderY = 10;
                    borderWidth = overlayWidth;
                    borderHeight = 117;
                    borderRadius = 12;
                } else if (model === 'SamsungS24') {
                    cropX = 100; //110
                    cropY = 175; //muda a posição pra cima dentro da borda
                    cropWidth = 265; //tentar 320
                    cropHeight = 330; //
                    overlayX = 18; //18
                    overlayY = 13;
                    overlayWidth = 95;
                    overlayHeight = 150; //
                    groupX = -12;
                    groupY = -3;
                    groupWidth = 99; //
                    groupHeight = 163; // 
                    borderX = 22;
                    borderY = 12;
                    borderWidth = 75; // 50 fica so nas cameras
                    borderHeight = 150;
                    borderRadius = 14;
                }

                const overlayKonvaImage = new Konva.Image({
                    image: overlayImg,
                    x: overlayX,
                    y: overlayY,
                    width: overlayWidth,
                    height: overlayHeight,
                    crop: {
                        x: cropX,
                        y: cropY,
                        width: cropWidth,
                        height: cropHeight
                    }
                });

                const group = new Konva.Group({
                    x: groupX,
                    y: groupY,
                    clipFunc: function (ctx) {
                        ctx.beginPath();
                        ctx.moveTo(borderRadius, 0);
                        ctx.arcTo(groupWidth, 0, groupWidth, groupHeight, borderRadius);
                        ctx.arcTo(groupWidth, groupHeight, 0, groupHeight, borderRadius);
                        ctx.arcTo(0, groupHeight, 0, 0, borderRadius);
                        ctx.arcTo(0, 0, groupWidth, 0, borderRadius);
                        ctx.closePath();
                        ctx.clip();
                    }
                });

                group.add(overlayKonvaImage);

                const borderRect = new Konva.Rect({
                    x: borderX,
                    y: borderY,
                    width: borderWidth,
                    height: borderHeight,
                    stroke: 'black',
                    strokeWidth: 3,
                    cornerRadius: borderRadius
                });

                group.add(borderRect);
                overlayLayer.add(group);
                overlayLayer.batchDraw();
            };
            overlayImg.src = overlaySrc;
        }

        document.getElementById('fileInput').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const userImage = new Konva.Image({
                        image: img,
                        x: 50,
                        y: 50,
                        draggable: true,
                        width: img.width,
                        height: img.height
                    });

                    imageLayer.add(userImage);

                    const tr = new Konva.Transformer({
                        nodes: [userImage],
                        boundBoxFunc: function (oldBox, newBox) {
                            newBox.width = Math.max(30, newBox.width);
                            newBox.height = Math.max(30, newBox.height);
                            newBox.x = Math.max(0, newBox.x);
                            newBox.y = Math.max(0, newBox.y);
                            newBox.x = Math.min(stage.width() - newBox.width, newBox.x);
                            newBox.y = Math.min(stage.height() - newBox.height, newBox.y);
                            return newBox;
                        }
                    });

                    imageLayer.add(tr);
                    imageLayer.draw();

                    userImage.on('click', (e) => {
                        e.cancelBubble = true;
                        tr.nodes([userImage]);
                        imageLayer.draw();
                    });

                    stage.on('click', (e) => {
                        if (e.target === stage) {
                            tr.nodes([]);
                            imageLayer.draw();
                        }
                    });

                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        });

        document.addEventListener('click', (e) => {
            const konvaContainer = document.getElementById('konvaContainer');
            if (!konvaContainer.contains(e.target)) {
                const tr = imageLayer.findOne('Transformer');
                if (tr) {
                    tr.nodes([]);
                    imageLayer.draw();
                }
            }
        });

        //document.getElementById('downloadButton').addEventListener('click', function () {
        //    const tempCanvas = document.createElement('canvas');
        //    tempCanvas.width = stage.width();
        //    tempCanvas.height = stage.height();
        //    const tempContext = tempCanvas.getContext('2d');

        //    const imageObj = new Image();
        //    imageObj.onload = function () {
        //        tempContext.beginPath();
        //        const radius = 40;
        //        tempContext.moveTo(radius, 0);
        //        tempContext.arcTo(tempCanvas.width, 0, tempCanvas.width, tempCanvas.height, radius);
        //        tempContext.arcTo(tempCanvas.width, tempCanvas.height, 0, tempCanvas.height, radius);
        //        tempContext.arcTo(0, tempCanvas.height, 0, 0, radius);
        //        tempContext.arcTo(0, 0, tempCanvas.width, 0, radius);
        //        tempContext.closePath();
        //        tempContext.clip();

        //        tempContext.drawImage(imageObj, 0, 0, tempCanvas.width, tempCanvas.height);
        //        const dataURL = tempCanvas.toDataURL();
        //        const link = document.createElement('a');
        //        link.href = dataURL;
        //        link.download = 'customized_image.png';
        //        document.body.appendChild(link);
        //        link.click();
        //        document.body.removeChild(link);
        //    };
        //    imageObj.src = stage.toDataURL();
        //});

        const marcaSelect = document.getElementById('marca');
        const modeloSelect = document.getElementById('modelo');

        marcaSelect.addEventListener('change', function () {
            const marca = this.value;
            const modelos = [];

            if (marca === 'Iphone') {
                modelos.push('15 Pro Max');
            } else if (marca === 'Samsung') {
                modelos.push('S24'/*, 'Note 10', 'A50'*/);
            }

            modeloSelect.innerHTML = '';
            modelos.forEach(function (modelo) {
                const option = document.createElement('option');
                option.value = modelo;
                option.text = modelo;
                modeloSelect.appendChild(option);
            });

            modeloSelect.dispatchEvent(new Event('change'));
        });

        modeloSelect.addEventListener('change', function () {
            const modelo = this.value;
            let backgroundSrc = '';
            let overlaySrc = '';
            let model = '';

            document.getElementById('modeloHidden').value = modelo;

            if (marcaSelect.value === 'Iphone') {
                if (modelo === '15 Pro Max') {
                    backgroundSrc = '/images/mockups/Iphone15Fundo.png';
                    overlaySrc = '/images/mockups/Iphone15Fundo.png';
                    model = 'Iphone15ProMax';
                }
            } else if (marcaSelect.value === 'Samsung') {
                if (modelo === 'S24') {
                    backgroundSrc = '/images/mockups/SamsungS24Fundo.png';
                    overlaySrc = '/images/mockups/SamsungS24Fundo.png';
                    model = 'SamsungS24';
                } //else if (modelo === 'Note 10') {
                //    backgroundSrc = '/images/mockups/SamsungNote10Fundo.png';
                //    overlaySrc = '/images/mockups/SamsungNote10Overlay.png';
                //    model = 'SamsungNote10';
                //} else if (modelo === 'A50') {
                //    backgroundSrc = '/images/mockups/SamsungA50Fundo.png';
                //    overlaySrc = '/images/mockups/SamsungA50Overlay.png';
                //    model = 'SamsungA50';
                //}
            }

            setBackgroundImage(backgroundSrc, overlaySrc, model);
        });

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('precoHidden').value = '40,35';
            document.getElementById('nomeCelularInput').value = '@userName' + "Capinha";
            document.getElementById('disponibilidadeInput').value = "True";
            document.getElementById('isPersonalizadaInput').value = "True";
            document.getElementById('categoriaIdInput').value = 3;

            if (marcaSelect.value) {
                modeloSelect.dispatchEvent(new Event('change'));
            }
        });

        document.getElementById('customizarForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const finalImageField = document.getElementById('finalImage');
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = stage.width();
            tempCanvas.height = stage.height();
            const tempContext = tempCanvas.getContext('2d');

            const backgroundImageObj = new Image();
            backgroundImageObj.onload = function () {
                tempContext.beginPath();
                const radius = 40;
                tempContext.moveTo(radius, 0);
                tempContext.arcTo(tempCanvas.width, 0, tempCanvas.width, tempCanvas.height, radius);
                tempContext.arcTo(tempCanvas.width, tempCanvas.height, 0, tempCanvas.height, radius);
                tempContext.arcTo(0, tempCanvas.height, 0, 0, radius);
                tempContext.arcTo(0, 0, tempCanvas.width, 0, radius);
                tempContext.closePath();
                tempContext.clip();

                tempContext.drawImage(backgroundImageObj, 0, 0, tempCanvas.width, tempCanvas.height);

                const overlayImageObj = new Image();
                overlayImageObj.onload = function () {
                    tempContext.drawImage(overlayImageObj, 0, 0, tempCanvas.width, tempCanvas.height);

                    const userImageObj = new Image();
                    userImageObj.onload = function () {
                        tempContext.drawImage(userImageObj, 0, 0, tempCanvas.width, tempCanvas.height);
                        finalImageField.value = tempCanvas.toDataURL();
                        document.getElementById('customizarForm').submit();
                    };
                    userImageObj.src = stage.toDataURL();
                };
                overlayImageObj.src = overlayImg.src;
            };
            backgroundImageObj.src = backgroundImg.src;
        });
    </script>
</body>
</html>


